// Generated by jextract

package org.libjpegturbo.turbojpeg;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tjtransform {
 *     tjregion r;
 *     int op;
 *     int options;
 *     void *data;
 *     int (*customFilter)(short *, tjregion, tjregion, int, int, struct tjtransform *);
 * }
 * }
 */
public class tjtransform {

    tjtransform() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        tjregion.layout().withName("r"),
        turbojpeg_h.C_INT.withName("op"),
        turbojpeg_h.C_INT.withName("options"),
        turbojpeg_h.C_POINTER.withName("data"),
        turbojpeg_h.C_POINTER.withName("customFilter")
    ).withName("tjtransform");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout r$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("r"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * tjregion r
     * }
     */
    public static final GroupLayout r$layout() {
        return r$LAYOUT;
    }

    private static final long r$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * tjregion r
     * }
     */
    public static final long r$offset() {
        return r$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * tjregion r
     * }
     */
    public static MemorySegment r(MemorySegment struct) {
        return struct.asSlice(r$OFFSET, r$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * tjregion r
     * }
     */
    public static void r(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, r$OFFSET, r$LAYOUT.byteSize());
    }

    private static final OfInt op$LAYOUT = (OfInt)$LAYOUT.select(groupElement("op"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int op
     * }
     */
    public static final OfInt op$layout() {
        return op$LAYOUT;
    }

    private static final long op$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int op
     * }
     */
    public static final long op$offset() {
        return op$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int op
     * }
     */
    public static int op(MemorySegment struct) {
        return struct.get(op$LAYOUT, op$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int op
     * }
     */
    public static void op(MemorySegment struct, int fieldValue) {
        struct.set(op$LAYOUT, op$OFFSET, fieldValue);
    }

    private static final OfInt options$LAYOUT = (OfInt)$LAYOUT.select(groupElement("options"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int options
     * }
     */
    public static final OfInt options$layout() {
        return options$LAYOUT;
    }

    private static final long options$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int options
     * }
     */
    public static final long options$offset() {
        return options$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int options
     * }
     */
    public static int options(MemorySegment struct) {
        return struct.get(options$LAYOUT, options$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int options
     * }
     */
    public static void options(MemorySegment struct, int fieldValue) {
        struct.set(options$LAYOUT, options$OFFSET, fieldValue);
    }

    private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final AddressLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*customFilter)(short *, tjregion, tjregion, int, int, struct tjtransform *)
     * }
     */
    public static class customFilter {

        customFilter() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3, int _x4, MemorySegment _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            tjregion.layout(),
            tjregion.layout(),
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = turbojpeg_h.upcallHandle(customFilter.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(customFilter.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3, int _x4, MemorySegment _x5) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout customFilter$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("customFilter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*customFilter)(short *, tjregion, tjregion, int, int, struct tjtransform *)
     * }
     */
    public static final AddressLayout customFilter$layout() {
        return customFilter$LAYOUT;
    }

    private static final long customFilter$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*customFilter)(short *, tjregion, tjregion, int, int, struct tjtransform *)
     * }
     */
    public static final long customFilter$offset() {
        return customFilter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*customFilter)(short *, tjregion, tjregion, int, int, struct tjtransform *)
     * }
     */
    public static MemorySegment customFilter(MemorySegment struct) {
        return struct.get(customFilter$LAYOUT, customFilter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*customFilter)(short *, tjregion, tjregion, int, int, struct tjtransform *)
     * }
     */
    public static void customFilter(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(customFilter$LAYOUT, customFilter$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

