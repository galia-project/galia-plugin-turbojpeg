// Generated by jextract

package org.libjpegturbo.turbojpeg;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class turbojpeg_h {

    turbojpeg_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int TJ_NUMINIT = (int)3L;
    /**
     * {@snippet lang=c :
     * #define TJ_NUMINIT 3
     * }
     */
    public static int TJ_NUMINIT() {
        return TJ_NUMINIT;
    }
    private static final int TJ_NUMSAMP = (int)7L;
    /**
     * {@snippet lang=c :
     * #define TJ_NUMSAMP 7
     * }
     */
    public static int TJ_NUMSAMP() {
        return TJ_NUMSAMP;
    }
    private static final int TJ_NUMPF = (int)12L;
    /**
     * {@snippet lang=c :
     * #define TJ_NUMPF 12
     * }
     */
    public static int TJ_NUMPF() {
        return TJ_NUMPF;
    }
    private static final int TJ_NUMCS = (int)5L;
    /**
     * {@snippet lang=c :
     * #define TJ_NUMCS 5
     * }
     */
    public static int TJ_NUMCS() {
        return TJ_NUMCS;
    }
    private static final int TJ_NUMERR = (int)2L;
    /**
     * {@snippet lang=c :
     * #define TJ_NUMERR 2
     * }
     */
    public static int TJ_NUMERR() {
        return TJ_NUMERR;
    }
    private static final int TJ_NUMXOP = (int)8L;
    /**
     * {@snippet lang=c :
     * #define TJ_NUMXOP 8
     * }
     */
    public static int TJ_NUMXOP() {
        return TJ_NUMXOP;
    }
    private static final int TJ_BGR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define TJ_BGR 1
     * }
     */
    public static int TJ_BGR() {
        return TJ_BGR;
    }
    private static final int TJ_ALPHAFIRST = (int)64L;
    /**
     * {@snippet lang=c :
     * #define TJ_ALPHAFIRST 64
     * }
     */
    public static int TJ_ALPHAFIRST() {
        return TJ_ALPHAFIRST;
    }
    private static final int TJ_YUV = (int)512L;
    /**
     * {@snippet lang=c :
     * #define TJ_YUV 512
     * }
     */
    public static int TJ_YUV() {
        return TJ_YUV;
    }
    private static final int TJFLAG_BOTTOMUP = (int)2L;
    /**
     * {@snippet lang=c :
     * #define TJFLAG_BOTTOMUP 2
     * }
     */
    public static int TJFLAG_BOTTOMUP() {
        return TJFLAG_BOTTOMUP;
    }
    private static final int TJFLAG_FORCEMMX = (int)8L;
    /**
     * {@snippet lang=c :
     * #define TJFLAG_FORCEMMX 8
     * }
     */
    public static int TJFLAG_FORCEMMX() {
        return TJFLAG_FORCEMMX;
    }
    private static final int TJFLAG_FORCESSE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define TJFLAG_FORCESSE 16
     * }
     */
    public static int TJFLAG_FORCESSE() {
        return TJFLAG_FORCESSE;
    }
    private static final int TJFLAG_FORCESSE2 = (int)32L;
    /**
     * {@snippet lang=c :
     * #define TJFLAG_FORCESSE2 32
     * }
     */
    public static int TJFLAG_FORCESSE2() {
        return TJFLAG_FORCESSE2;
    }
    private static final int TJFLAG_FORCESSE3 = (int)128L;
    /**
     * {@snippet lang=c :
     * #define TJFLAG_FORCESSE3 128
     * }
     */
    public static int TJFLAG_FORCESSE3() {
        return TJFLAG_FORCESSE3;
    }
    private static final int TJFLAG_FASTUPSAMPLE = (int)256L;
    /**
     * {@snippet lang=c :
     * #define TJFLAG_FASTUPSAMPLE 256
     * }
     */
    public static int TJFLAG_FASTUPSAMPLE() {
        return TJFLAG_FASTUPSAMPLE;
    }
    private static final int TJFLAG_NOREALLOC = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define TJFLAG_NOREALLOC 1024
     * }
     */
    public static int TJFLAG_NOREALLOC() {
        return TJFLAG_NOREALLOC;
    }
    private static final int TJFLAG_FASTDCT = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define TJFLAG_FASTDCT 2048
     * }
     */
    public static int TJFLAG_FASTDCT() {
        return TJFLAG_FASTDCT;
    }
    private static final int TJFLAG_ACCURATEDCT = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define TJFLAG_ACCURATEDCT 4096
     * }
     */
    public static int TJFLAG_ACCURATEDCT() {
        return TJFLAG_ACCURATEDCT;
    }
    private static final int TJFLAG_STOPONWARNING = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define TJFLAG_STOPONWARNING 8192
     * }
     */
    public static int TJFLAG_STOPONWARNING() {
        return TJFLAG_STOPONWARNING;
    }
    private static final int TJFLAG_PROGRESSIVE = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define TJFLAG_PROGRESSIVE 16384
     * }
     */
    public static int TJFLAG_PROGRESSIVE() {
        return TJFLAG_PROGRESSIVE;
    }
    private static final int TJFLAG_LIMITSCANS = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define TJFLAG_LIMITSCANS 32768
     * }
     */
    public static int TJFLAG_LIMITSCANS() {
        return TJFLAG_LIMITSCANS;
    }
    /**
     * {@snippet lang=c :
     * typedef long ptrdiff_t
     * }
     */
    public static final OfLong ptrdiff_t = turbojpeg_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = turbojpeg_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int wchar_t
     * }
     */
    public static final OfInt wchar_t = turbojpeg_h.C_INT;
    private static final int TJINIT_COMPRESS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TJINIT.TJINIT_COMPRESS = 0
     * }
     */
    public static int TJINIT_COMPRESS() {
        return TJINIT_COMPRESS;
    }
    private static final int TJINIT_DECOMPRESS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TJINIT.TJINIT_DECOMPRESS = 1
     * }
     */
    public static int TJINIT_DECOMPRESS() {
        return TJINIT_DECOMPRESS;
    }
    private static final int TJINIT_TRANSFORM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum TJINIT.TJINIT_TRANSFORM = 2
     * }
     */
    public static int TJINIT_TRANSFORM() {
        return TJINIT_TRANSFORM;
    }
    private static final int TJSAMP_444 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TJSAMP.TJSAMP_444 = 0
     * }
     */
    public static int TJSAMP_444() {
        return TJSAMP_444;
    }
    private static final int TJSAMP_422 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TJSAMP.TJSAMP_422 = 1
     * }
     */
    public static int TJSAMP_422() {
        return TJSAMP_422;
    }
    private static final int TJSAMP_420 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum TJSAMP.TJSAMP_420 = 2
     * }
     */
    public static int TJSAMP_420() {
        return TJSAMP_420;
    }
    private static final int TJSAMP_GRAY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum TJSAMP.TJSAMP_GRAY = 3
     * }
     */
    public static int TJSAMP_GRAY() {
        return TJSAMP_GRAY;
    }
    private static final int TJSAMP_440 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum TJSAMP.TJSAMP_440 = 4
     * }
     */
    public static int TJSAMP_440() {
        return TJSAMP_440;
    }
    private static final int TJSAMP_411 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum TJSAMP.TJSAMP_411 = 5
     * }
     */
    public static int TJSAMP_411() {
        return TJSAMP_411;
    }
    private static final int TJSAMP_441 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum TJSAMP.TJSAMP_441 = 6
     * }
     */
    public static int TJSAMP_441() {
        return TJSAMP_441;
    }
    private static final int TJSAMP_UNKNOWN = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum TJSAMP.TJSAMP_UNKNOWN = -1
     * }
     */
    public static int TJSAMP_UNKNOWN() {
        return TJSAMP_UNKNOWN;
    }
    private static final int TJPF_RGB = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TJPF.TJPF_RGB = 0
     * }
     */
    public static int TJPF_RGB() {
        return TJPF_RGB;
    }
    private static final int TJPF_BGR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TJPF.TJPF_BGR = 1
     * }
     */
    public static int TJPF_BGR() {
        return TJPF_BGR;
    }
    private static final int TJPF_RGBX = (int)2L;
    /**
     * {@snippet lang=c :
     * enum TJPF.TJPF_RGBX = 2
     * }
     */
    public static int TJPF_RGBX() {
        return TJPF_RGBX;
    }
    private static final int TJPF_BGRX = (int)3L;
    /**
     * {@snippet lang=c :
     * enum TJPF.TJPF_BGRX = 3
     * }
     */
    public static int TJPF_BGRX() {
        return TJPF_BGRX;
    }
    private static final int TJPF_XBGR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum TJPF.TJPF_XBGR = 4
     * }
     */
    public static int TJPF_XBGR() {
        return TJPF_XBGR;
    }
    private static final int TJPF_XRGB = (int)5L;
    /**
     * {@snippet lang=c :
     * enum TJPF.TJPF_XRGB = 5
     * }
     */
    public static int TJPF_XRGB() {
        return TJPF_XRGB;
    }
    private static final int TJPF_GRAY = (int)6L;
    /**
     * {@snippet lang=c :
     * enum TJPF.TJPF_GRAY = 6
     * }
     */
    public static int TJPF_GRAY() {
        return TJPF_GRAY;
    }
    private static final int TJPF_RGBA = (int)7L;
    /**
     * {@snippet lang=c :
     * enum TJPF.TJPF_RGBA = 7
     * }
     */
    public static int TJPF_RGBA() {
        return TJPF_RGBA;
    }
    private static final int TJPF_BGRA = (int)8L;
    /**
     * {@snippet lang=c :
     * enum TJPF.TJPF_BGRA = 8
     * }
     */
    public static int TJPF_BGRA() {
        return TJPF_BGRA;
    }
    private static final int TJPF_ABGR = (int)9L;
    /**
     * {@snippet lang=c :
     * enum TJPF.TJPF_ABGR = 9
     * }
     */
    public static int TJPF_ABGR() {
        return TJPF_ABGR;
    }
    private static final int TJPF_ARGB = (int)10L;
    /**
     * {@snippet lang=c :
     * enum TJPF.TJPF_ARGB = 10
     * }
     */
    public static int TJPF_ARGB() {
        return TJPF_ARGB;
    }
    private static final int TJPF_CMYK = (int)11L;
    /**
     * {@snippet lang=c :
     * enum TJPF.TJPF_CMYK = 11
     * }
     */
    public static int TJPF_CMYK() {
        return TJPF_CMYK;
    }
    private static final int TJPF_UNKNOWN = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum TJPF.TJPF_UNKNOWN = -1
     * }
     */
    public static int TJPF_UNKNOWN() {
        return TJPF_UNKNOWN;
    }
    private static final int TJCS_RGB = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TJCS.TJCS_RGB = 0
     * }
     */
    public static int TJCS_RGB() {
        return TJCS_RGB;
    }
    private static final int TJCS_YCbCr = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TJCS.TJCS_YCbCr = 1
     * }
     */
    public static int TJCS_YCbCr() {
        return TJCS_YCbCr;
    }
    private static final int TJCS_GRAY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum TJCS.TJCS_GRAY = 2
     * }
     */
    public static int TJCS_GRAY() {
        return TJCS_GRAY;
    }
    private static final int TJCS_CMYK = (int)3L;
    /**
     * {@snippet lang=c :
     * enum TJCS.TJCS_CMYK = 3
     * }
     */
    public static int TJCS_CMYK() {
        return TJCS_CMYK;
    }
    private static final int TJCS_YCCK = (int)4L;
    /**
     * {@snippet lang=c :
     * enum TJCS.TJCS_YCCK = 4
     * }
     */
    public static int TJCS_YCCK() {
        return TJCS_YCCK;
    }
    private static final int TJPARAM_STOPONWARNING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_STOPONWARNING = 0
     * }
     */
    public static int TJPARAM_STOPONWARNING() {
        return TJPARAM_STOPONWARNING;
    }
    private static final int TJPARAM_BOTTOMUP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_BOTTOMUP = 1
     * }
     */
    public static int TJPARAM_BOTTOMUP() {
        return TJPARAM_BOTTOMUP;
    }
    private static final int TJPARAM_NOREALLOC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_NOREALLOC = 2
     * }
     */
    public static int TJPARAM_NOREALLOC() {
        return TJPARAM_NOREALLOC;
    }
    private static final int TJPARAM_QUALITY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_QUALITY = 3
     * }
     */
    public static int TJPARAM_QUALITY() {
        return TJPARAM_QUALITY;
    }
    private static final int TJPARAM_SUBSAMP = (int)4L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_SUBSAMP = 4
     * }
     */
    public static int TJPARAM_SUBSAMP() {
        return TJPARAM_SUBSAMP;
    }
    private static final int TJPARAM_JPEGWIDTH = (int)5L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_JPEGWIDTH = 5
     * }
     */
    public static int TJPARAM_JPEGWIDTH() {
        return TJPARAM_JPEGWIDTH;
    }
    private static final int TJPARAM_JPEGHEIGHT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_JPEGHEIGHT = 6
     * }
     */
    public static int TJPARAM_JPEGHEIGHT() {
        return TJPARAM_JPEGHEIGHT;
    }
    private static final int TJPARAM_PRECISION = (int)7L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_PRECISION = 7
     * }
     */
    public static int TJPARAM_PRECISION() {
        return TJPARAM_PRECISION;
    }
    private static final int TJPARAM_COLORSPACE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_COLORSPACE = 8
     * }
     */
    public static int TJPARAM_COLORSPACE() {
        return TJPARAM_COLORSPACE;
    }
    private static final int TJPARAM_FASTUPSAMPLE = (int)9L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_FASTUPSAMPLE = 9
     * }
     */
    public static int TJPARAM_FASTUPSAMPLE() {
        return TJPARAM_FASTUPSAMPLE;
    }
    private static final int TJPARAM_FASTDCT = (int)10L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_FASTDCT = 10
     * }
     */
    public static int TJPARAM_FASTDCT() {
        return TJPARAM_FASTDCT;
    }
    private static final int TJPARAM_OPTIMIZE = (int)11L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_OPTIMIZE = 11
     * }
     */
    public static int TJPARAM_OPTIMIZE() {
        return TJPARAM_OPTIMIZE;
    }
    private static final int TJPARAM_PROGRESSIVE = (int)12L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_PROGRESSIVE = 12
     * }
     */
    public static int TJPARAM_PROGRESSIVE() {
        return TJPARAM_PROGRESSIVE;
    }
    private static final int TJPARAM_SCANLIMIT = (int)13L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_SCANLIMIT = 13
     * }
     */
    public static int TJPARAM_SCANLIMIT() {
        return TJPARAM_SCANLIMIT;
    }
    private static final int TJPARAM_ARITHMETIC = (int)14L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_ARITHMETIC = 14
     * }
     */
    public static int TJPARAM_ARITHMETIC() {
        return TJPARAM_ARITHMETIC;
    }
    private static final int TJPARAM_LOSSLESS = (int)15L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_LOSSLESS = 15
     * }
     */
    public static int TJPARAM_LOSSLESS() {
        return TJPARAM_LOSSLESS;
    }
    private static final int TJPARAM_LOSSLESSPSV = (int)16L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_LOSSLESSPSV = 16
     * }
     */
    public static int TJPARAM_LOSSLESSPSV() {
        return TJPARAM_LOSSLESSPSV;
    }
    private static final int TJPARAM_LOSSLESSPT = (int)17L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_LOSSLESSPT = 17
     * }
     */
    public static int TJPARAM_LOSSLESSPT() {
        return TJPARAM_LOSSLESSPT;
    }
    private static final int TJPARAM_RESTARTBLOCKS = (int)18L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_RESTARTBLOCKS = 18
     * }
     */
    public static int TJPARAM_RESTARTBLOCKS() {
        return TJPARAM_RESTARTBLOCKS;
    }
    private static final int TJPARAM_RESTARTROWS = (int)19L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_RESTARTROWS = 19
     * }
     */
    public static int TJPARAM_RESTARTROWS() {
        return TJPARAM_RESTARTROWS;
    }
    private static final int TJPARAM_XDENSITY = (int)20L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_XDENSITY = 20
     * }
     */
    public static int TJPARAM_XDENSITY() {
        return TJPARAM_XDENSITY;
    }
    private static final int TJPARAM_YDENSITY = (int)21L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_YDENSITY = 21
     * }
     */
    public static int TJPARAM_YDENSITY() {
        return TJPARAM_YDENSITY;
    }
    private static final int TJPARAM_DENSITYUNITS = (int)22L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_DENSITYUNITS = 22
     * }
     */
    public static int TJPARAM_DENSITYUNITS() {
        return TJPARAM_DENSITYUNITS;
    }
    private static final int TJPARAM_MAXMEMORY = (int)23L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_MAXMEMORY = 23
     * }
     */
    public static int TJPARAM_MAXMEMORY() {
        return TJPARAM_MAXMEMORY;
    }
    private static final int TJPARAM_MAXPIXELS = (int)24L;
    /**
     * {@snippet lang=c :
     * enum TJPARAM.TJPARAM_MAXPIXELS = 24
     * }
     */
    public static int TJPARAM_MAXPIXELS() {
        return TJPARAM_MAXPIXELS;
    }
    private static final int TJERR_WARNING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TJERR.TJERR_WARNING = 0
     * }
     */
    public static int TJERR_WARNING() {
        return TJERR_WARNING;
    }
    private static final int TJERR_FATAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TJERR.TJERR_FATAL = 1
     * }
     */
    public static int TJERR_FATAL() {
        return TJERR_FATAL;
    }
    private static final int TJXOP_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TJXOP.TJXOP_NONE = 0
     * }
     */
    public static int TJXOP_NONE() {
        return TJXOP_NONE;
    }
    private static final int TJXOP_HFLIP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TJXOP.TJXOP_HFLIP = 1
     * }
     */
    public static int TJXOP_HFLIP() {
        return TJXOP_HFLIP;
    }
    private static final int TJXOP_VFLIP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum TJXOP.TJXOP_VFLIP = 2
     * }
     */
    public static int TJXOP_VFLIP() {
        return TJXOP_VFLIP;
    }
    private static final int TJXOP_TRANSPOSE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum TJXOP.TJXOP_TRANSPOSE = 3
     * }
     */
    public static int TJXOP_TRANSPOSE() {
        return TJXOP_TRANSPOSE;
    }
    private static final int TJXOP_TRANSVERSE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum TJXOP.TJXOP_TRANSVERSE = 4
     * }
     */
    public static int TJXOP_TRANSVERSE() {
        return TJXOP_TRANSVERSE;
    }
    private static final int TJXOP_ROT90 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum TJXOP.TJXOP_ROT90 = 5
     * }
     */
    public static int TJXOP_ROT90() {
        return TJXOP_ROT90;
    }
    private static final int TJXOP_ROT180 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum TJXOP.TJXOP_ROT180 = 6
     * }
     */
    public static int TJXOP_ROT180() {
        return TJXOP_ROT180;
    }
    private static final int TJXOP_ROT270 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum TJXOP.TJXOP_ROT270 = 7
     * }
     */
    public static int TJXOP_ROT270() {
        return TJXOP_ROT270;
    }
    /**
     * {@snippet lang=c :
     * typedef void *tjhandle
     * }
     */
    public static final AddressLayout tjhandle = turbojpeg_h.C_POINTER;

    private static class tj3Init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3Init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * tjhandle tj3Init(int initType)
     * }
     */
    public static FunctionDescriptor tj3Init$descriptor() {
        return tj3Init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * tjhandle tj3Init(int initType)
     * }
     */
    public static MethodHandle tj3Init$handle() {
        return tj3Init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * tjhandle tj3Init(int initType)
     * }
     */
    public static MemorySegment tj3Init(int initType) {
        var mh$ = tj3Init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3Init", initType);
            }
            return (MemorySegment)mh$.invokeExact(initType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3Set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3Set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3Set(tjhandle handle, int param, int value)
     * }
     */
    public static FunctionDescriptor tj3Set$descriptor() {
        return tj3Set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3Set(tjhandle handle, int param, int value)
     * }
     */
    public static MethodHandle tj3Set$handle() {
        return tj3Set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3Set(tjhandle handle, int param, int value)
     * }
     */
    public static int tj3Set(MemorySegment handle, int param, int value) {
        var mh$ = tj3Set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3Set", handle, param, value);
            }
            return (int)mh$.invokeExact(handle, param, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3Get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3Get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3Get(tjhandle handle, int param)
     * }
     */
    public static FunctionDescriptor tj3Get$descriptor() {
        return tj3Get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3Get(tjhandle handle, int param)
     * }
     */
    public static MethodHandle tj3Get$handle() {
        return tj3Get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3Get(tjhandle handle, int param)
     * }
     */
    public static int tj3Get(MemorySegment handle, int param) {
        var mh$ = tj3Get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3Get", handle, param);
            }
            return (int)mh$.invokeExact(handle, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3Compress8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3Compress8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3Compress8(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char **jpegBuf, size_t *jpegSize)
     * }
     */
    public static FunctionDescriptor tj3Compress8$descriptor() {
        return tj3Compress8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3Compress8(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char **jpegBuf, size_t *jpegSize)
     * }
     */
    public static MethodHandle tj3Compress8$handle() {
        return tj3Compress8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3Compress8(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char **jpegBuf, size_t *jpegSize)
     * }
     */
    public static int tj3Compress8(MemorySegment handle, MemorySegment srcBuf, int width, int pitch, int height, int pixelFormat, MemorySegment jpegBuf, MemorySegment jpegSize) {
        var mh$ = tj3Compress8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3Compress8", handle, srcBuf, width, pitch, height, pixelFormat, jpegBuf, jpegSize);
            }
            return (int)mh$.invokeExact(handle, srcBuf, width, pitch, height, pixelFormat, jpegBuf, jpegSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3Compress12 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3Compress12"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3Compress12(tjhandle handle, const short *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char **jpegBuf, size_t *jpegSize)
     * }
     */
    public static FunctionDescriptor tj3Compress12$descriptor() {
        return tj3Compress12.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3Compress12(tjhandle handle, const short *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char **jpegBuf, size_t *jpegSize)
     * }
     */
    public static MethodHandle tj3Compress12$handle() {
        return tj3Compress12.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3Compress12(tjhandle handle, const short *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char **jpegBuf, size_t *jpegSize)
     * }
     */
    public static int tj3Compress12(MemorySegment handle, MemorySegment srcBuf, int width, int pitch, int height, int pixelFormat, MemorySegment jpegBuf, MemorySegment jpegSize) {
        var mh$ = tj3Compress12.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3Compress12", handle, srcBuf, width, pitch, height, pixelFormat, jpegBuf, jpegSize);
            }
            return (int)mh$.invokeExact(handle, srcBuf, width, pitch, height, pixelFormat, jpegBuf, jpegSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3Compress16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3Compress16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3Compress16(tjhandle handle, const unsigned short *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char **jpegBuf, size_t *jpegSize)
     * }
     */
    public static FunctionDescriptor tj3Compress16$descriptor() {
        return tj3Compress16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3Compress16(tjhandle handle, const unsigned short *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char **jpegBuf, size_t *jpegSize)
     * }
     */
    public static MethodHandle tj3Compress16$handle() {
        return tj3Compress16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3Compress16(tjhandle handle, const unsigned short *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char **jpegBuf, size_t *jpegSize)
     * }
     */
    public static int tj3Compress16(MemorySegment handle, MemorySegment srcBuf, int width, int pitch, int height, int pixelFormat, MemorySegment jpegBuf, MemorySegment jpegSize) {
        var mh$ = tj3Compress16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3Compress16", handle, srcBuf, width, pitch, height, pixelFormat, jpegBuf, jpegSize);
            }
            return (int)mh$.invokeExact(handle, srcBuf, width, pitch, height, pixelFormat, jpegBuf, jpegSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3CompressFromYUV8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3CompressFromYUV8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3CompressFromYUV8(tjhandle handle, const unsigned char *srcBuf, int width, int align, int height, unsigned char **jpegBuf, size_t *jpegSize)
     * }
     */
    public static FunctionDescriptor tj3CompressFromYUV8$descriptor() {
        return tj3CompressFromYUV8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3CompressFromYUV8(tjhandle handle, const unsigned char *srcBuf, int width, int align, int height, unsigned char **jpegBuf, size_t *jpegSize)
     * }
     */
    public static MethodHandle tj3CompressFromYUV8$handle() {
        return tj3CompressFromYUV8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3CompressFromYUV8(tjhandle handle, const unsigned char *srcBuf, int width, int align, int height, unsigned char **jpegBuf, size_t *jpegSize)
     * }
     */
    public static int tj3CompressFromYUV8(MemorySegment handle, MemorySegment srcBuf, int width, int align, int height, MemorySegment jpegBuf, MemorySegment jpegSize) {
        var mh$ = tj3CompressFromYUV8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3CompressFromYUV8", handle, srcBuf, width, align, height, jpegBuf, jpegSize);
            }
            return (int)mh$.invokeExact(handle, srcBuf, width, align, height, jpegBuf, jpegSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3CompressFromYUVPlanes8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3CompressFromYUVPlanes8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3CompressFromYUVPlanes8(tjhandle handle, const unsigned char *const *srcPlanes, int width, const int *strides, int height, unsigned char **jpegBuf, size_t *jpegSize)
     * }
     */
    public static FunctionDescriptor tj3CompressFromYUVPlanes8$descriptor() {
        return tj3CompressFromYUVPlanes8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3CompressFromYUVPlanes8(tjhandle handle, const unsigned char *const *srcPlanes, int width, const int *strides, int height, unsigned char **jpegBuf, size_t *jpegSize)
     * }
     */
    public static MethodHandle tj3CompressFromYUVPlanes8$handle() {
        return tj3CompressFromYUVPlanes8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3CompressFromYUVPlanes8(tjhandle handle, const unsigned char *const *srcPlanes, int width, const int *strides, int height, unsigned char **jpegBuf, size_t *jpegSize)
     * }
     */
    public static int tj3CompressFromYUVPlanes8(MemorySegment handle, MemorySegment srcPlanes, int width, MemorySegment strides, int height, MemorySegment jpegBuf, MemorySegment jpegSize) {
        var mh$ = tj3CompressFromYUVPlanes8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3CompressFromYUVPlanes8", handle, srcPlanes, width, strides, height, jpegBuf, jpegSize);
            }
            return (int)mh$.invokeExact(handle, srcPlanes, width, strides, height, jpegBuf, jpegSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3JPEGBufSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3JPEGBufSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t tj3JPEGBufSize(int width, int height, int jpegSubsamp)
     * }
     */
    public static FunctionDescriptor tj3JPEGBufSize$descriptor() {
        return tj3JPEGBufSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t tj3JPEGBufSize(int width, int height, int jpegSubsamp)
     * }
     */
    public static MethodHandle tj3JPEGBufSize$handle() {
        return tj3JPEGBufSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * size_t tj3JPEGBufSize(int width, int height, int jpegSubsamp)
     * }
     */
    public static long tj3JPEGBufSize(int width, int height, int jpegSubsamp) {
        var mh$ = tj3JPEGBufSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3JPEGBufSize", width, height, jpegSubsamp);
            }
            return (long)mh$.invokeExact(width, height, jpegSubsamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3YUVBufSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3YUVBufSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t tj3YUVBufSize(int width, int align, int height, int subsamp)
     * }
     */
    public static FunctionDescriptor tj3YUVBufSize$descriptor() {
        return tj3YUVBufSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t tj3YUVBufSize(int width, int align, int height, int subsamp)
     * }
     */
    public static MethodHandle tj3YUVBufSize$handle() {
        return tj3YUVBufSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * size_t tj3YUVBufSize(int width, int align, int height, int subsamp)
     * }
     */
    public static long tj3YUVBufSize(int width, int align, int height, int subsamp) {
        var mh$ = tj3YUVBufSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3YUVBufSize", width, align, height, subsamp);
            }
            return (long)mh$.invokeExact(width, align, height, subsamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3YUVPlaneSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3YUVPlaneSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t tj3YUVPlaneSize(int componentID, int width, int stride, int height, int subsamp)
     * }
     */
    public static FunctionDescriptor tj3YUVPlaneSize$descriptor() {
        return tj3YUVPlaneSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t tj3YUVPlaneSize(int componentID, int width, int stride, int height, int subsamp)
     * }
     */
    public static MethodHandle tj3YUVPlaneSize$handle() {
        return tj3YUVPlaneSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * size_t tj3YUVPlaneSize(int componentID, int width, int stride, int height, int subsamp)
     * }
     */
    public static long tj3YUVPlaneSize(int componentID, int width, int stride, int height, int subsamp) {
        var mh$ = tj3YUVPlaneSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3YUVPlaneSize", componentID, width, stride, height, subsamp);
            }
            return (long)mh$.invokeExact(componentID, width, stride, height, subsamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3YUVPlaneWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3YUVPlaneWidth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3YUVPlaneWidth(int componentID, int width, int subsamp)
     * }
     */
    public static FunctionDescriptor tj3YUVPlaneWidth$descriptor() {
        return tj3YUVPlaneWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3YUVPlaneWidth(int componentID, int width, int subsamp)
     * }
     */
    public static MethodHandle tj3YUVPlaneWidth$handle() {
        return tj3YUVPlaneWidth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3YUVPlaneWidth(int componentID, int width, int subsamp)
     * }
     */
    public static int tj3YUVPlaneWidth(int componentID, int width, int subsamp) {
        var mh$ = tj3YUVPlaneWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3YUVPlaneWidth", componentID, width, subsamp);
            }
            return (int)mh$.invokeExact(componentID, width, subsamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3YUVPlaneHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3YUVPlaneHeight"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3YUVPlaneHeight(int componentID, int height, int subsamp)
     * }
     */
    public static FunctionDescriptor tj3YUVPlaneHeight$descriptor() {
        return tj3YUVPlaneHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3YUVPlaneHeight(int componentID, int height, int subsamp)
     * }
     */
    public static MethodHandle tj3YUVPlaneHeight$handle() {
        return tj3YUVPlaneHeight.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3YUVPlaneHeight(int componentID, int height, int subsamp)
     * }
     */
    public static int tj3YUVPlaneHeight(int componentID, int height, int subsamp) {
        var mh$ = tj3YUVPlaneHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3YUVPlaneHeight", componentID, height, subsamp);
            }
            return (int)mh$.invokeExact(componentID, height, subsamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3EncodeYUV8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3EncodeYUV8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3EncodeYUV8(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char *dstBuf, int align)
     * }
     */
    public static FunctionDescriptor tj3EncodeYUV8$descriptor() {
        return tj3EncodeYUV8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3EncodeYUV8(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char *dstBuf, int align)
     * }
     */
    public static MethodHandle tj3EncodeYUV8$handle() {
        return tj3EncodeYUV8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3EncodeYUV8(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char *dstBuf, int align)
     * }
     */
    public static int tj3EncodeYUV8(MemorySegment handle, MemorySegment srcBuf, int width, int pitch, int height, int pixelFormat, MemorySegment dstBuf, int align) {
        var mh$ = tj3EncodeYUV8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3EncodeYUV8", handle, srcBuf, width, pitch, height, pixelFormat, dstBuf, align);
            }
            return (int)mh$.invokeExact(handle, srcBuf, width, pitch, height, pixelFormat, dstBuf, align);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3EncodeYUVPlanes8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3EncodeYUVPlanes8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3EncodeYUVPlanes8(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char **dstPlanes, int *strides)
     * }
     */
    public static FunctionDescriptor tj3EncodeYUVPlanes8$descriptor() {
        return tj3EncodeYUVPlanes8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3EncodeYUVPlanes8(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char **dstPlanes, int *strides)
     * }
     */
    public static MethodHandle tj3EncodeYUVPlanes8$handle() {
        return tj3EncodeYUVPlanes8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3EncodeYUVPlanes8(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char **dstPlanes, int *strides)
     * }
     */
    public static int tj3EncodeYUVPlanes8(MemorySegment handle, MemorySegment srcBuf, int width, int pitch, int height, int pixelFormat, MemorySegment dstPlanes, MemorySegment strides) {
        var mh$ = tj3EncodeYUVPlanes8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3EncodeYUVPlanes8", handle, srcBuf, width, pitch, height, pixelFormat, dstPlanes, strides);
            }
            return (int)mh$.invokeExact(handle, srcBuf, width, pitch, height, pixelFormat, dstPlanes, strides);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3DecompressHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3DecompressHeader"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3DecompressHeader(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize)
     * }
     */
    public static FunctionDescriptor tj3DecompressHeader$descriptor() {
        return tj3DecompressHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3DecompressHeader(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize)
     * }
     */
    public static MethodHandle tj3DecompressHeader$handle() {
        return tj3DecompressHeader.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3DecompressHeader(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize)
     * }
     */
    public static int tj3DecompressHeader(MemorySegment handle, MemorySegment jpegBuf, long jpegSize) {
        var mh$ = tj3DecompressHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3DecompressHeader", handle, jpegBuf, jpegSize);
            }
            return (int)mh$.invokeExact(handle, jpegBuf, jpegSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3GetScalingFactors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3GetScalingFactors"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * tjscalingfactor *tj3GetScalingFactors(int *numScalingFactors)
     * }
     */
    public static FunctionDescriptor tj3GetScalingFactors$descriptor() {
        return tj3GetScalingFactors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * tjscalingfactor *tj3GetScalingFactors(int *numScalingFactors)
     * }
     */
    public static MethodHandle tj3GetScalingFactors$handle() {
        return tj3GetScalingFactors.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * tjscalingfactor *tj3GetScalingFactors(int *numScalingFactors)
     * }
     */
    public static MemorySegment tj3GetScalingFactors(MemorySegment numScalingFactors) {
        var mh$ = tj3GetScalingFactors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3GetScalingFactors", numScalingFactors);
            }
            return (MemorySegment)mh$.invokeExact(numScalingFactors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3SetScalingFactor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            tjscalingfactor.layout()
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3SetScalingFactor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3SetScalingFactor(tjhandle handle, tjscalingfactor scalingFactor)
     * }
     */
    public static FunctionDescriptor tj3SetScalingFactor$descriptor() {
        return tj3SetScalingFactor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3SetScalingFactor(tjhandle handle, tjscalingfactor scalingFactor)
     * }
     */
    public static MethodHandle tj3SetScalingFactor$handle() {
        return tj3SetScalingFactor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3SetScalingFactor(tjhandle handle, tjscalingfactor scalingFactor)
     * }
     */
    public static int tj3SetScalingFactor(MemorySegment handle, MemorySegment scalingFactor) {
        var mh$ = tj3SetScalingFactor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3SetScalingFactor", handle, scalingFactor);
            }
            return (int)mh$.invokeExact(handle, scalingFactor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3SetCroppingRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            tjregion.layout()
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3SetCroppingRegion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3SetCroppingRegion(tjhandle handle, tjregion croppingRegion)
     * }
     */
    public static FunctionDescriptor tj3SetCroppingRegion$descriptor() {
        return tj3SetCroppingRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3SetCroppingRegion(tjhandle handle, tjregion croppingRegion)
     * }
     */
    public static MethodHandle tj3SetCroppingRegion$handle() {
        return tj3SetCroppingRegion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3SetCroppingRegion(tjhandle handle, tjregion croppingRegion)
     * }
     */
    public static int tj3SetCroppingRegion(MemorySegment handle, MemorySegment croppingRegion) {
        var mh$ = tj3SetCroppingRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3SetCroppingRegion", handle, croppingRegion);
            }
            return (int)mh$.invokeExact(handle, croppingRegion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3Decompress8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3Decompress8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3Decompress8(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize, unsigned char *dstBuf, int pitch, int pixelFormat)
     * }
     */
    public static FunctionDescriptor tj3Decompress8$descriptor() {
        return tj3Decompress8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3Decompress8(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize, unsigned char *dstBuf, int pitch, int pixelFormat)
     * }
     */
    public static MethodHandle tj3Decompress8$handle() {
        return tj3Decompress8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3Decompress8(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize, unsigned char *dstBuf, int pitch, int pixelFormat)
     * }
     */
    public static int tj3Decompress8(MemorySegment handle, MemorySegment jpegBuf, long jpegSize, MemorySegment dstBuf, int pitch, int pixelFormat) {
        var mh$ = tj3Decompress8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3Decompress8", handle, jpegBuf, jpegSize, dstBuf, pitch, pixelFormat);
            }
            return (int)mh$.invokeExact(handle, jpegBuf, jpegSize, dstBuf, pitch, pixelFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3Decompress12 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3Decompress12"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3Decompress12(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize, short *dstBuf, int pitch, int pixelFormat)
     * }
     */
    public static FunctionDescriptor tj3Decompress12$descriptor() {
        return tj3Decompress12.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3Decompress12(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize, short *dstBuf, int pitch, int pixelFormat)
     * }
     */
    public static MethodHandle tj3Decompress12$handle() {
        return tj3Decompress12.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3Decompress12(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize, short *dstBuf, int pitch, int pixelFormat)
     * }
     */
    public static int tj3Decompress12(MemorySegment handle, MemorySegment jpegBuf, long jpegSize, MemorySegment dstBuf, int pitch, int pixelFormat) {
        var mh$ = tj3Decompress12.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3Decompress12", handle, jpegBuf, jpegSize, dstBuf, pitch, pixelFormat);
            }
            return (int)mh$.invokeExact(handle, jpegBuf, jpegSize, dstBuf, pitch, pixelFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3Decompress16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3Decompress16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3Decompress16(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize, unsigned short *dstBuf, int pitch, int pixelFormat)
     * }
     */
    public static FunctionDescriptor tj3Decompress16$descriptor() {
        return tj3Decompress16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3Decompress16(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize, unsigned short *dstBuf, int pitch, int pixelFormat)
     * }
     */
    public static MethodHandle tj3Decompress16$handle() {
        return tj3Decompress16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3Decompress16(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize, unsigned short *dstBuf, int pitch, int pixelFormat)
     * }
     */
    public static int tj3Decompress16(MemorySegment handle, MemorySegment jpegBuf, long jpegSize, MemorySegment dstBuf, int pitch, int pixelFormat) {
        var mh$ = tj3Decompress16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3Decompress16", handle, jpegBuf, jpegSize, dstBuf, pitch, pixelFormat);
            }
            return (int)mh$.invokeExact(handle, jpegBuf, jpegSize, dstBuf, pitch, pixelFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3DecompressToYUV8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3DecompressToYUV8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3DecompressToYUV8(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize, unsigned char *dstBuf, int align)
     * }
     */
    public static FunctionDescriptor tj3DecompressToYUV8$descriptor() {
        return tj3DecompressToYUV8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3DecompressToYUV8(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize, unsigned char *dstBuf, int align)
     * }
     */
    public static MethodHandle tj3DecompressToYUV8$handle() {
        return tj3DecompressToYUV8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3DecompressToYUV8(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize, unsigned char *dstBuf, int align)
     * }
     */
    public static int tj3DecompressToYUV8(MemorySegment handle, MemorySegment jpegBuf, long jpegSize, MemorySegment dstBuf, int align) {
        var mh$ = tj3DecompressToYUV8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3DecompressToYUV8", handle, jpegBuf, jpegSize, dstBuf, align);
            }
            return (int)mh$.invokeExact(handle, jpegBuf, jpegSize, dstBuf, align);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3DecompressToYUVPlanes8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3DecompressToYUVPlanes8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3DecompressToYUVPlanes8(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize, unsigned char **dstPlanes, int *strides)
     * }
     */
    public static FunctionDescriptor tj3DecompressToYUVPlanes8$descriptor() {
        return tj3DecompressToYUVPlanes8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3DecompressToYUVPlanes8(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize, unsigned char **dstPlanes, int *strides)
     * }
     */
    public static MethodHandle tj3DecompressToYUVPlanes8$handle() {
        return tj3DecompressToYUVPlanes8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3DecompressToYUVPlanes8(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize, unsigned char **dstPlanes, int *strides)
     * }
     */
    public static int tj3DecompressToYUVPlanes8(MemorySegment handle, MemorySegment jpegBuf, long jpegSize, MemorySegment dstPlanes, MemorySegment strides) {
        var mh$ = tj3DecompressToYUVPlanes8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3DecompressToYUVPlanes8", handle, jpegBuf, jpegSize, dstPlanes, strides);
            }
            return (int)mh$.invokeExact(handle, jpegBuf, jpegSize, dstPlanes, strides);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3DecodeYUV8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3DecodeYUV8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3DecodeYUV8(tjhandle handle, const unsigned char *srcBuf, int align, unsigned char *dstBuf, int width, int pitch, int height, int pixelFormat)
     * }
     */
    public static FunctionDescriptor tj3DecodeYUV8$descriptor() {
        return tj3DecodeYUV8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3DecodeYUV8(tjhandle handle, const unsigned char *srcBuf, int align, unsigned char *dstBuf, int width, int pitch, int height, int pixelFormat)
     * }
     */
    public static MethodHandle tj3DecodeYUV8$handle() {
        return tj3DecodeYUV8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3DecodeYUV8(tjhandle handle, const unsigned char *srcBuf, int align, unsigned char *dstBuf, int width, int pitch, int height, int pixelFormat)
     * }
     */
    public static int tj3DecodeYUV8(MemorySegment handle, MemorySegment srcBuf, int align, MemorySegment dstBuf, int width, int pitch, int height, int pixelFormat) {
        var mh$ = tj3DecodeYUV8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3DecodeYUV8", handle, srcBuf, align, dstBuf, width, pitch, height, pixelFormat);
            }
            return (int)mh$.invokeExact(handle, srcBuf, align, dstBuf, width, pitch, height, pixelFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3DecodeYUVPlanes8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3DecodeYUVPlanes8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3DecodeYUVPlanes8(tjhandle handle, const unsigned char *const *srcPlanes, const int *strides, unsigned char *dstBuf, int width, int pitch, int height, int pixelFormat)
     * }
     */
    public static FunctionDescriptor tj3DecodeYUVPlanes8$descriptor() {
        return tj3DecodeYUVPlanes8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3DecodeYUVPlanes8(tjhandle handle, const unsigned char *const *srcPlanes, const int *strides, unsigned char *dstBuf, int width, int pitch, int height, int pixelFormat)
     * }
     */
    public static MethodHandle tj3DecodeYUVPlanes8$handle() {
        return tj3DecodeYUVPlanes8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3DecodeYUVPlanes8(tjhandle handle, const unsigned char *const *srcPlanes, const int *strides, unsigned char *dstBuf, int width, int pitch, int height, int pixelFormat)
     * }
     */
    public static int tj3DecodeYUVPlanes8(MemorySegment handle, MemorySegment srcPlanes, MemorySegment strides, MemorySegment dstBuf, int width, int pitch, int height, int pixelFormat) {
        var mh$ = tj3DecodeYUVPlanes8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3DecodeYUVPlanes8", handle, srcPlanes, strides, dstBuf, width, pitch, height, pixelFormat);
            }
            return (int)mh$.invokeExact(handle, srcPlanes, strides, dstBuf, width, pitch, height, pixelFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3Transform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3Transform"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3Transform(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize, int n, unsigned char **dstBufs, size_t *dstSizes, const tjtransform *transforms)
     * }
     */
    public static FunctionDescriptor tj3Transform$descriptor() {
        return tj3Transform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3Transform(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize, int n, unsigned char **dstBufs, size_t *dstSizes, const tjtransform *transforms)
     * }
     */
    public static MethodHandle tj3Transform$handle() {
        return tj3Transform.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3Transform(tjhandle handle, const unsigned char *jpegBuf, size_t jpegSize, int n, unsigned char **dstBufs, size_t *dstSizes, const tjtransform *transforms)
     * }
     */
    public static int tj3Transform(MemorySegment handle, MemorySegment jpegBuf, long jpegSize, int n, MemorySegment dstBufs, MemorySegment dstSizes, MemorySegment transforms) {
        var mh$ = tj3Transform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3Transform", handle, jpegBuf, jpegSize, n, dstBufs, dstSizes, transforms);
            }
            return (int)mh$.invokeExact(handle, jpegBuf, jpegSize, n, dstBufs, dstSizes, transforms);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3Destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3Destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tj3Destroy(tjhandle handle)
     * }
     */
    public static FunctionDescriptor tj3Destroy$descriptor() {
        return tj3Destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tj3Destroy(tjhandle handle)
     * }
     */
    public static MethodHandle tj3Destroy$handle() {
        return tj3Destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void tj3Destroy(tjhandle handle)
     * }
     */
    public static void tj3Destroy(MemorySegment handle) {
        var mh$ = tj3Destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3Destroy", handle);
            }
            mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3Alloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3Alloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *tj3Alloc(size_t bytes)
     * }
     */
    public static FunctionDescriptor tj3Alloc$descriptor() {
        return tj3Alloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *tj3Alloc(size_t bytes)
     * }
     */
    public static MethodHandle tj3Alloc$handle() {
        return tj3Alloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void *tj3Alloc(size_t bytes)
     * }
     */
    public static MemorySegment tj3Alloc(long bytes) {
        var mh$ = tj3Alloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3Alloc", bytes);
            }
            return (MemorySegment)mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3LoadImage8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3LoadImage8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *tj3LoadImage8(tjhandle handle, const char *filename, int *width, int align, int *height, int *pixelFormat)
     * }
     */
    public static FunctionDescriptor tj3LoadImage8$descriptor() {
        return tj3LoadImage8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *tj3LoadImage8(tjhandle handle, const char *filename, int *width, int align, int *height, int *pixelFormat)
     * }
     */
    public static MethodHandle tj3LoadImage8$handle() {
        return tj3LoadImage8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *tj3LoadImage8(tjhandle handle, const char *filename, int *width, int align, int *height, int *pixelFormat)
     * }
     */
    public static MemorySegment tj3LoadImage8(MemorySegment handle, MemorySegment filename, MemorySegment width, int align, MemorySegment height, MemorySegment pixelFormat) {
        var mh$ = tj3LoadImage8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3LoadImage8", handle, filename, width, align, height, pixelFormat);
            }
            return (MemorySegment)mh$.invokeExact(handle, filename, width, align, height, pixelFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3LoadImage12 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3LoadImage12"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * short *tj3LoadImage12(tjhandle handle, const char *filename, int *width, int align, int *height, int *pixelFormat)
     * }
     */
    public static FunctionDescriptor tj3LoadImage12$descriptor() {
        return tj3LoadImage12.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * short *tj3LoadImage12(tjhandle handle, const char *filename, int *width, int align, int *height, int *pixelFormat)
     * }
     */
    public static MethodHandle tj3LoadImage12$handle() {
        return tj3LoadImage12.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * short *tj3LoadImage12(tjhandle handle, const char *filename, int *width, int align, int *height, int *pixelFormat)
     * }
     */
    public static MemorySegment tj3LoadImage12(MemorySegment handle, MemorySegment filename, MemorySegment width, int align, MemorySegment height, MemorySegment pixelFormat) {
        var mh$ = tj3LoadImage12.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3LoadImage12", handle, filename, width, align, height, pixelFormat);
            }
            return (MemorySegment)mh$.invokeExact(handle, filename, width, align, height, pixelFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3LoadImage16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3LoadImage16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned short *tj3LoadImage16(tjhandle handle, const char *filename, int *width, int align, int *height, int *pixelFormat)
     * }
     */
    public static FunctionDescriptor tj3LoadImage16$descriptor() {
        return tj3LoadImage16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned short *tj3LoadImage16(tjhandle handle, const char *filename, int *width, int align, int *height, int *pixelFormat)
     * }
     */
    public static MethodHandle tj3LoadImage16$handle() {
        return tj3LoadImage16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned short *tj3LoadImage16(tjhandle handle, const char *filename, int *width, int align, int *height, int *pixelFormat)
     * }
     */
    public static MemorySegment tj3LoadImage16(MemorySegment handle, MemorySegment filename, MemorySegment width, int align, MemorySegment height, MemorySegment pixelFormat) {
        var mh$ = tj3LoadImage16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3LoadImage16", handle, filename, width, align, height, pixelFormat);
            }
            return (MemorySegment)mh$.invokeExact(handle, filename, width, align, height, pixelFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3SaveImage8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3SaveImage8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3SaveImage8(tjhandle handle, const char *filename, const unsigned char *buffer, int width, int pitch, int height, int pixelFormat)
     * }
     */
    public static FunctionDescriptor tj3SaveImage8$descriptor() {
        return tj3SaveImage8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3SaveImage8(tjhandle handle, const char *filename, const unsigned char *buffer, int width, int pitch, int height, int pixelFormat)
     * }
     */
    public static MethodHandle tj3SaveImage8$handle() {
        return tj3SaveImage8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3SaveImage8(tjhandle handle, const char *filename, const unsigned char *buffer, int width, int pitch, int height, int pixelFormat)
     * }
     */
    public static int tj3SaveImage8(MemorySegment handle, MemorySegment filename, MemorySegment buffer, int width, int pitch, int height, int pixelFormat) {
        var mh$ = tj3SaveImage8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3SaveImage8", handle, filename, buffer, width, pitch, height, pixelFormat);
            }
            return (int)mh$.invokeExact(handle, filename, buffer, width, pitch, height, pixelFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3SaveImage12 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3SaveImage12"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3SaveImage12(tjhandle handle, const char *filename, const short *buffer, int width, int pitch, int height, int pixelFormat)
     * }
     */
    public static FunctionDescriptor tj3SaveImage12$descriptor() {
        return tj3SaveImage12.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3SaveImage12(tjhandle handle, const char *filename, const short *buffer, int width, int pitch, int height, int pixelFormat)
     * }
     */
    public static MethodHandle tj3SaveImage12$handle() {
        return tj3SaveImage12.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3SaveImage12(tjhandle handle, const char *filename, const short *buffer, int width, int pitch, int height, int pixelFormat)
     * }
     */
    public static int tj3SaveImage12(MemorySegment handle, MemorySegment filename, MemorySegment buffer, int width, int pitch, int height, int pixelFormat) {
        var mh$ = tj3SaveImage12.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3SaveImage12", handle, filename, buffer, width, pitch, height, pixelFormat);
            }
            return (int)mh$.invokeExact(handle, filename, buffer, width, pitch, height, pixelFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3SaveImage16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3SaveImage16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3SaveImage16(tjhandle handle, const char *filename, const unsigned short *buffer, int width, int pitch, int height, int pixelFormat)
     * }
     */
    public static FunctionDescriptor tj3SaveImage16$descriptor() {
        return tj3SaveImage16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3SaveImage16(tjhandle handle, const char *filename, const unsigned short *buffer, int width, int pitch, int height, int pixelFormat)
     * }
     */
    public static MethodHandle tj3SaveImage16$handle() {
        return tj3SaveImage16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3SaveImage16(tjhandle handle, const char *filename, const unsigned short *buffer, int width, int pitch, int height, int pixelFormat)
     * }
     */
    public static int tj3SaveImage16(MemorySegment handle, MemorySegment filename, MemorySegment buffer, int width, int pitch, int height, int pixelFormat) {
        var mh$ = tj3SaveImage16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3SaveImage16", handle, filename, buffer, width, pitch, height, pixelFormat);
            }
            return (int)mh$.invokeExact(handle, filename, buffer, width, pitch, height, pixelFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3Free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3Free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tj3Free(void *buffer)
     * }
     */
    public static FunctionDescriptor tj3Free$descriptor() {
        return tj3Free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tj3Free(void *buffer)
     * }
     */
    public static MethodHandle tj3Free$handle() {
        return tj3Free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void tj3Free(void *buffer)
     * }
     */
    public static void tj3Free(MemorySegment buffer) {
        var mh$ = tj3Free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3Free", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3GetErrorStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3GetErrorStr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *tj3GetErrorStr(tjhandle handle)
     * }
     */
    public static FunctionDescriptor tj3GetErrorStr$descriptor() {
        return tj3GetErrorStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *tj3GetErrorStr(tjhandle handle)
     * }
     */
    public static MethodHandle tj3GetErrorStr$handle() {
        return tj3GetErrorStr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * char *tj3GetErrorStr(tjhandle handle)
     * }
     */
    public static MemorySegment tj3GetErrorStr(MemorySegment handle) {
        var mh$ = tj3GetErrorStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3GetErrorStr", handle);
            }
            return (MemorySegment)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tj3GetErrorCode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tj3GetErrorCode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tj3GetErrorCode(tjhandle handle)
     * }
     */
    public static FunctionDescriptor tj3GetErrorCode$descriptor() {
        return tj3GetErrorCode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tj3GetErrorCode(tjhandle handle)
     * }
     */
    public static MethodHandle tj3GetErrorCode$handle() {
        return tj3GetErrorCode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tj3GetErrorCode(tjhandle handle)
     * }
     */
    public static int tj3GetErrorCode(MemorySegment handle) {
        var mh$ = tj3GetErrorCode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tj3GetErrorCode", handle);
            }
            return (int)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TJBUFSIZE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("TJBUFSIZE"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long TJBUFSIZE(int width, int height)
     * }
     */
    public static FunctionDescriptor TJBUFSIZE$descriptor() {
        return TJBUFSIZE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long TJBUFSIZE(int width, int height)
     * }
     */
    public static MethodHandle TJBUFSIZE$handle() {
        return TJBUFSIZE.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long TJBUFSIZE(int width, int height)
     * }
     */
    public static long TJBUFSIZE(int width, int height) {
        var mh$ = TJBUFSIZE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TJBUFSIZE", width, height);
            }
            return (long)mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjCompress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjCompress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjCompress(tjhandle handle, unsigned char *srcBuf, int width, int pitch, int height, int pixelSize, unsigned char *dstBuf, unsigned long *compressedSize, int jpegSubsamp, int jpegQual, int flags)
     * }
     */
    public static FunctionDescriptor tjCompress$descriptor() {
        return tjCompress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjCompress(tjhandle handle, unsigned char *srcBuf, int width, int pitch, int height, int pixelSize, unsigned char *dstBuf, unsigned long *compressedSize, int jpegSubsamp, int jpegQual, int flags)
     * }
     */
    public static MethodHandle tjCompress$handle() {
        return tjCompress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjCompress(tjhandle handle, unsigned char *srcBuf, int width, int pitch, int height, int pixelSize, unsigned char *dstBuf, unsigned long *compressedSize, int jpegSubsamp, int jpegQual, int flags)
     * }
     */
    public static int tjCompress(MemorySegment handle, MemorySegment srcBuf, int width, int pitch, int height, int pixelSize, MemorySegment dstBuf, MemorySegment compressedSize, int jpegSubsamp, int jpegQual, int flags) {
        var mh$ = tjCompress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjCompress", handle, srcBuf, width, pitch, height, pixelSize, dstBuf, compressedSize, jpegSubsamp, jpegQual, flags);
            }
            return (int)mh$.invokeExact(handle, srcBuf, width, pitch, height, pixelSize, dstBuf, compressedSize, jpegSubsamp, jpegQual, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjDecompress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjDecompress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjDecompress(tjhandle handle, unsigned char *jpegBuf, unsigned long jpegSize, unsigned char *dstBuf, int width, int pitch, int height, int pixelSize, int flags)
     * }
     */
    public static FunctionDescriptor tjDecompress$descriptor() {
        return tjDecompress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjDecompress(tjhandle handle, unsigned char *jpegBuf, unsigned long jpegSize, unsigned char *dstBuf, int width, int pitch, int height, int pixelSize, int flags)
     * }
     */
    public static MethodHandle tjDecompress$handle() {
        return tjDecompress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjDecompress(tjhandle handle, unsigned char *jpegBuf, unsigned long jpegSize, unsigned char *dstBuf, int width, int pitch, int height, int pixelSize, int flags)
     * }
     */
    public static int tjDecompress(MemorySegment handle, MemorySegment jpegBuf, long jpegSize, MemorySegment dstBuf, int width, int pitch, int height, int pixelSize, int flags) {
        var mh$ = tjDecompress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjDecompress", handle, jpegBuf, jpegSize, dstBuf, width, pitch, height, pixelSize, flags);
            }
            return (int)mh$.invokeExact(handle, jpegBuf, jpegSize, dstBuf, width, pitch, height, pixelSize, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjDecompressHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjDecompressHeader"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjDecompressHeader(tjhandle handle, unsigned char *jpegBuf, unsigned long jpegSize, int *width, int *height)
     * }
     */
    public static FunctionDescriptor tjDecompressHeader$descriptor() {
        return tjDecompressHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjDecompressHeader(tjhandle handle, unsigned char *jpegBuf, unsigned long jpegSize, int *width, int *height)
     * }
     */
    public static MethodHandle tjDecompressHeader$handle() {
        return tjDecompressHeader.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjDecompressHeader(tjhandle handle, unsigned char *jpegBuf, unsigned long jpegSize, int *width, int *height)
     * }
     */
    public static int tjDecompressHeader(MemorySegment handle, MemorySegment jpegBuf, long jpegSize, MemorySegment width, MemorySegment height) {
        var mh$ = tjDecompressHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjDecompressHeader", handle, jpegBuf, jpegSize, width, height);
            }
            return (int)mh$.invokeExact(handle, jpegBuf, jpegSize, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjDestroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjDestroy(tjhandle handle)
     * }
     */
    public static FunctionDescriptor tjDestroy$descriptor() {
        return tjDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjDestroy(tjhandle handle)
     * }
     */
    public static MethodHandle tjDestroy$handle() {
        return tjDestroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjDestroy(tjhandle handle)
     * }
     */
    public static int tjDestroy(MemorySegment handle) {
        var mh$ = tjDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjDestroy", handle);
            }
            return (int)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjGetErrorStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjGetErrorStr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *tjGetErrorStr()
     * }
     */
    public static FunctionDescriptor tjGetErrorStr$descriptor() {
        return tjGetErrorStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *tjGetErrorStr()
     * }
     */
    public static MethodHandle tjGetErrorStr$handle() {
        return tjGetErrorStr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * char *tjGetErrorStr()
     * }
     */
    public static MemorySegment tjGetErrorStr() {
        var mh$ = tjGetErrorStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjGetErrorStr");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjInitCompress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjInitCompress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * tjhandle tjInitCompress()
     * }
     */
    public static FunctionDescriptor tjInitCompress$descriptor() {
        return tjInitCompress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * tjhandle tjInitCompress()
     * }
     */
    public static MethodHandle tjInitCompress$handle() {
        return tjInitCompress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * tjhandle tjInitCompress()
     * }
     */
    public static MemorySegment tjInitCompress() {
        var mh$ = tjInitCompress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjInitCompress");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjInitDecompress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjInitDecompress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * tjhandle tjInitDecompress()
     * }
     */
    public static FunctionDescriptor tjInitDecompress$descriptor() {
        return tjInitDecompress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * tjhandle tjInitDecompress()
     * }
     */
    public static MethodHandle tjInitDecompress$handle() {
        return tjInitDecompress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * tjhandle tjInitDecompress()
     * }
     */
    public static MemorySegment tjInitDecompress() {
        var mh$ = tjInitDecompress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjInitDecompress");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TJBUFSIZEYUV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("TJBUFSIZEYUV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long TJBUFSIZEYUV(int width, int height, int jpegSubsamp)
     * }
     */
    public static FunctionDescriptor TJBUFSIZEYUV$descriptor() {
        return TJBUFSIZEYUV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long TJBUFSIZEYUV(int width, int height, int jpegSubsamp)
     * }
     */
    public static MethodHandle TJBUFSIZEYUV$handle() {
        return TJBUFSIZEYUV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long TJBUFSIZEYUV(int width, int height, int jpegSubsamp)
     * }
     */
    public static long TJBUFSIZEYUV(int width, int height, int jpegSubsamp) {
        var mh$ = TJBUFSIZEYUV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TJBUFSIZEYUV", width, height, jpegSubsamp);
            }
            return (long)mh$.invokeExact(width, height, jpegSubsamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjDecompressHeader2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjDecompressHeader2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjDecompressHeader2(tjhandle handle, unsigned char *jpegBuf, unsigned long jpegSize, int *width, int *height, int *jpegSubsamp)
     * }
     */
    public static FunctionDescriptor tjDecompressHeader2$descriptor() {
        return tjDecompressHeader2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjDecompressHeader2(tjhandle handle, unsigned char *jpegBuf, unsigned long jpegSize, int *width, int *height, int *jpegSubsamp)
     * }
     */
    public static MethodHandle tjDecompressHeader2$handle() {
        return tjDecompressHeader2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjDecompressHeader2(tjhandle handle, unsigned char *jpegBuf, unsigned long jpegSize, int *width, int *height, int *jpegSubsamp)
     * }
     */
    public static int tjDecompressHeader2(MemorySegment handle, MemorySegment jpegBuf, long jpegSize, MemorySegment width, MemorySegment height, MemorySegment jpegSubsamp) {
        var mh$ = tjDecompressHeader2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjDecompressHeader2", handle, jpegBuf, jpegSize, width, height, jpegSubsamp);
            }
            return (int)mh$.invokeExact(handle, jpegBuf, jpegSize, width, height, jpegSubsamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjDecompressToYUV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjDecompressToYUV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjDecompressToYUV(tjhandle handle, unsigned char *jpegBuf, unsigned long jpegSize, unsigned char *dstBuf, int flags)
     * }
     */
    public static FunctionDescriptor tjDecompressToYUV$descriptor() {
        return tjDecompressToYUV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjDecompressToYUV(tjhandle handle, unsigned char *jpegBuf, unsigned long jpegSize, unsigned char *dstBuf, int flags)
     * }
     */
    public static MethodHandle tjDecompressToYUV$handle() {
        return tjDecompressToYUV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjDecompressToYUV(tjhandle handle, unsigned char *jpegBuf, unsigned long jpegSize, unsigned char *dstBuf, int flags)
     * }
     */
    public static int tjDecompressToYUV(MemorySegment handle, MemorySegment jpegBuf, long jpegSize, MemorySegment dstBuf, int flags) {
        var mh$ = tjDecompressToYUV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjDecompressToYUV", handle, jpegBuf, jpegSize, dstBuf, flags);
            }
            return (int)mh$.invokeExact(handle, jpegBuf, jpegSize, dstBuf, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjEncodeYUV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjEncodeYUV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjEncodeYUV(tjhandle handle, unsigned char *srcBuf, int width, int pitch, int height, int pixelSize, unsigned char *dstBuf, int subsamp, int flags)
     * }
     */
    public static FunctionDescriptor tjEncodeYUV$descriptor() {
        return tjEncodeYUV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjEncodeYUV(tjhandle handle, unsigned char *srcBuf, int width, int pitch, int height, int pixelSize, unsigned char *dstBuf, int subsamp, int flags)
     * }
     */
    public static MethodHandle tjEncodeYUV$handle() {
        return tjEncodeYUV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjEncodeYUV(tjhandle handle, unsigned char *srcBuf, int width, int pitch, int height, int pixelSize, unsigned char *dstBuf, int subsamp, int flags)
     * }
     */
    public static int tjEncodeYUV(MemorySegment handle, MemorySegment srcBuf, int width, int pitch, int height, int pixelSize, MemorySegment dstBuf, int subsamp, int flags) {
        var mh$ = tjEncodeYUV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjEncodeYUV", handle, srcBuf, width, pitch, height, pixelSize, dstBuf, subsamp, flags);
            }
            return (int)mh$.invokeExact(handle, srcBuf, width, pitch, height, pixelSize, dstBuf, subsamp, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjAlloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjAlloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *tjAlloc(int bytes)
     * }
     */
    public static FunctionDescriptor tjAlloc$descriptor() {
        return tjAlloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *tjAlloc(int bytes)
     * }
     */
    public static MethodHandle tjAlloc$handle() {
        return tjAlloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *tjAlloc(int bytes)
     * }
     */
    public static MemorySegment tjAlloc(int bytes) {
        var mh$ = tjAlloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjAlloc", bytes);
            }
            return (MemorySegment)mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjBufSize$ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjBufSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long tjBufSize(int width, int height, int jpegSubsamp)
     * }
     */
    public static FunctionDescriptor tjBufSize$descriptor() {
        return tjBufSize$.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long tjBufSize(int width, int height, int jpegSubsamp)
     * }
     */
    public static MethodHandle tjBufSize$handle() {
        return tjBufSize$.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long tjBufSize(int width, int height, int jpegSubsamp)
     * }
     */
    public static long tjBufSize(int width, int height, int jpegSubsamp) {
        var mh$ = tjBufSize$.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjBufSize", width, height, jpegSubsamp);
            }
            return (long)mh$.invokeExact(width, height, jpegSubsamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjBufSizeYUV$ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjBufSizeYUV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long tjBufSizeYUV(int width, int height, int subsamp)
     * }
     */
    public static FunctionDescriptor tjBufSizeYUV$descriptor() {
        return tjBufSizeYUV$.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long tjBufSizeYUV(int width, int height, int subsamp)
     * }
     */
    public static MethodHandle tjBufSizeYUV$handle() {
        return tjBufSizeYUV$.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long tjBufSizeYUV(int width, int height, int subsamp)
     * }
     */
    public static long tjBufSizeYUV(int width, int height, int subsamp) {
        var mh$ = tjBufSizeYUV$.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjBufSizeYUV", width, height, subsamp);
            }
            return (long)mh$.invokeExact(width, height, subsamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjCompress2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjCompress2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjCompress2(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char **jpegBuf, unsigned long *jpegSize, int jpegSubsamp, int jpegQual, int flags)
     * }
     */
    public static FunctionDescriptor tjCompress2$descriptor() {
        return tjCompress2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjCompress2(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char **jpegBuf, unsigned long *jpegSize, int jpegSubsamp, int jpegQual, int flags)
     * }
     */
    public static MethodHandle tjCompress2$handle() {
        return tjCompress2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjCompress2(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char **jpegBuf, unsigned long *jpegSize, int jpegSubsamp, int jpegQual, int flags)
     * }
     */
    public static int tjCompress2(MemorySegment handle, MemorySegment srcBuf, int width, int pitch, int height, int pixelFormat, MemorySegment jpegBuf, MemorySegment jpegSize, int jpegSubsamp, int jpegQual, int flags) {
        var mh$ = tjCompress2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjCompress2", handle, srcBuf, width, pitch, height, pixelFormat, jpegBuf, jpegSize, jpegSubsamp, jpegQual, flags);
            }
            return (int)mh$.invokeExact(handle, srcBuf, width, pitch, height, pixelFormat, jpegBuf, jpegSize, jpegSubsamp, jpegQual, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjDecompress2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjDecompress2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjDecompress2(tjhandle handle, const unsigned char *jpegBuf, unsigned long jpegSize, unsigned char *dstBuf, int width, int pitch, int height, int pixelFormat, int flags)
     * }
     */
    public static FunctionDescriptor tjDecompress2$descriptor() {
        return tjDecompress2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjDecompress2(tjhandle handle, const unsigned char *jpegBuf, unsigned long jpegSize, unsigned char *dstBuf, int width, int pitch, int height, int pixelFormat, int flags)
     * }
     */
    public static MethodHandle tjDecompress2$handle() {
        return tjDecompress2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjDecompress2(tjhandle handle, const unsigned char *jpegBuf, unsigned long jpegSize, unsigned char *dstBuf, int width, int pitch, int height, int pixelFormat, int flags)
     * }
     */
    public static int tjDecompress2(MemorySegment handle, MemorySegment jpegBuf, long jpegSize, MemorySegment dstBuf, int width, int pitch, int height, int pixelFormat, int flags) {
        var mh$ = tjDecompress2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjDecompress2", handle, jpegBuf, jpegSize, dstBuf, width, pitch, height, pixelFormat, flags);
            }
            return (int)mh$.invokeExact(handle, jpegBuf, jpegSize, dstBuf, width, pitch, height, pixelFormat, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjEncodeYUV2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjEncodeYUV2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjEncodeYUV2(tjhandle handle, unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char *dstBuf, int subsamp, int flags)
     * }
     */
    public static FunctionDescriptor tjEncodeYUV2$descriptor() {
        return tjEncodeYUV2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjEncodeYUV2(tjhandle handle, unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char *dstBuf, int subsamp, int flags)
     * }
     */
    public static MethodHandle tjEncodeYUV2$handle() {
        return tjEncodeYUV2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjEncodeYUV2(tjhandle handle, unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char *dstBuf, int subsamp, int flags)
     * }
     */
    public static int tjEncodeYUV2(MemorySegment handle, MemorySegment srcBuf, int width, int pitch, int height, int pixelFormat, MemorySegment dstBuf, int subsamp, int flags) {
        var mh$ = tjEncodeYUV2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjEncodeYUV2", handle, srcBuf, width, pitch, height, pixelFormat, dstBuf, subsamp, flags);
            }
            return (int)mh$.invokeExact(handle, srcBuf, width, pitch, height, pixelFormat, dstBuf, subsamp, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tjFree(unsigned char *buffer)
     * }
     */
    public static FunctionDescriptor tjFree$descriptor() {
        return tjFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tjFree(unsigned char *buffer)
     * }
     */
    public static MethodHandle tjFree$handle() {
        return tjFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void tjFree(unsigned char *buffer)
     * }
     */
    public static void tjFree(MemorySegment buffer) {
        var mh$ = tjFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjFree", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjGetScalingFactors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjGetScalingFactors"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * tjscalingfactor *tjGetScalingFactors(int *numscalingfactors)
     * }
     */
    public static FunctionDescriptor tjGetScalingFactors$descriptor() {
        return tjGetScalingFactors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * tjscalingfactor *tjGetScalingFactors(int *numscalingfactors)
     * }
     */
    public static MethodHandle tjGetScalingFactors$handle() {
        return tjGetScalingFactors.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * tjscalingfactor *tjGetScalingFactors(int *numscalingfactors)
     * }
     */
    public static MemorySegment tjGetScalingFactors(MemorySegment numscalingfactors) {
        var mh$ = tjGetScalingFactors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjGetScalingFactors", numscalingfactors);
            }
            return (MemorySegment)mh$.invokeExact(numscalingfactors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjInitTransform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjInitTransform"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * tjhandle tjInitTransform()
     * }
     */
    public static FunctionDescriptor tjInitTransform$descriptor() {
        return tjInitTransform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * tjhandle tjInitTransform()
     * }
     */
    public static MethodHandle tjInitTransform$handle() {
        return tjInitTransform.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * tjhandle tjInitTransform()
     * }
     */
    public static MemorySegment tjInitTransform() {
        var mh$ = tjInitTransform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjInitTransform");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjTransform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjTransform"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjTransform(tjhandle handle, const unsigned char *jpegBuf, unsigned long jpegSize, int n, unsigned char **dstBufs, unsigned long *dstSizes, tjtransform *transforms, int flags)
     * }
     */
    public static FunctionDescriptor tjTransform$descriptor() {
        return tjTransform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjTransform(tjhandle handle, const unsigned char *jpegBuf, unsigned long jpegSize, int n, unsigned char **dstBufs, unsigned long *dstSizes, tjtransform *transforms, int flags)
     * }
     */
    public static MethodHandle tjTransform$handle() {
        return tjTransform.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjTransform(tjhandle handle, const unsigned char *jpegBuf, unsigned long jpegSize, int n, unsigned char **dstBufs, unsigned long *dstSizes, tjtransform *transforms, int flags)
     * }
     */
    public static int tjTransform(MemorySegment handle, MemorySegment jpegBuf, long jpegSize, int n, MemorySegment dstBufs, MemorySegment dstSizes, MemorySegment transforms, int flags) {
        var mh$ = tjTransform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjTransform", handle, jpegBuf, jpegSize, n, dstBufs, dstSizes, transforms, flags);
            }
            return (int)mh$.invokeExact(handle, jpegBuf, jpegSize, n, dstBufs, dstSizes, transforms, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjBufSizeYUV2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjBufSizeYUV2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long tjBufSizeYUV2(int width, int align, int height, int subsamp)
     * }
     */
    public static FunctionDescriptor tjBufSizeYUV2$descriptor() {
        return tjBufSizeYUV2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long tjBufSizeYUV2(int width, int align, int height, int subsamp)
     * }
     */
    public static MethodHandle tjBufSizeYUV2$handle() {
        return tjBufSizeYUV2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long tjBufSizeYUV2(int width, int align, int height, int subsamp)
     * }
     */
    public static long tjBufSizeYUV2(int width, int align, int height, int subsamp) {
        var mh$ = tjBufSizeYUV2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjBufSizeYUV2", width, align, height, subsamp);
            }
            return (long)mh$.invokeExact(width, align, height, subsamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjCompressFromYUV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjCompressFromYUV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjCompressFromYUV(tjhandle handle, const unsigned char *srcBuf, int width, int align, int height, int subsamp, unsigned char **jpegBuf, unsigned long *jpegSize, int jpegQual, int flags)
     * }
     */
    public static FunctionDescriptor tjCompressFromYUV$descriptor() {
        return tjCompressFromYUV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjCompressFromYUV(tjhandle handle, const unsigned char *srcBuf, int width, int align, int height, int subsamp, unsigned char **jpegBuf, unsigned long *jpegSize, int jpegQual, int flags)
     * }
     */
    public static MethodHandle tjCompressFromYUV$handle() {
        return tjCompressFromYUV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjCompressFromYUV(tjhandle handle, const unsigned char *srcBuf, int width, int align, int height, int subsamp, unsigned char **jpegBuf, unsigned long *jpegSize, int jpegQual, int flags)
     * }
     */
    public static int tjCompressFromYUV(MemorySegment handle, MemorySegment srcBuf, int width, int align, int height, int subsamp, MemorySegment jpegBuf, MemorySegment jpegSize, int jpegQual, int flags) {
        var mh$ = tjCompressFromYUV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjCompressFromYUV", handle, srcBuf, width, align, height, subsamp, jpegBuf, jpegSize, jpegQual, flags);
            }
            return (int)mh$.invokeExact(handle, srcBuf, width, align, height, subsamp, jpegBuf, jpegSize, jpegQual, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjCompressFromYUVPlanes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjCompressFromYUVPlanes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjCompressFromYUVPlanes(tjhandle handle, const unsigned char **srcPlanes, int width, const int *strides, int height, int subsamp, unsigned char **jpegBuf, unsigned long *jpegSize, int jpegQual, int flags)
     * }
     */
    public static FunctionDescriptor tjCompressFromYUVPlanes$descriptor() {
        return tjCompressFromYUVPlanes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjCompressFromYUVPlanes(tjhandle handle, const unsigned char **srcPlanes, int width, const int *strides, int height, int subsamp, unsigned char **jpegBuf, unsigned long *jpegSize, int jpegQual, int flags)
     * }
     */
    public static MethodHandle tjCompressFromYUVPlanes$handle() {
        return tjCompressFromYUVPlanes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjCompressFromYUVPlanes(tjhandle handle, const unsigned char **srcPlanes, int width, const int *strides, int height, int subsamp, unsigned char **jpegBuf, unsigned long *jpegSize, int jpegQual, int flags)
     * }
     */
    public static int tjCompressFromYUVPlanes(MemorySegment handle, MemorySegment srcPlanes, int width, MemorySegment strides, int height, int subsamp, MemorySegment jpegBuf, MemorySegment jpegSize, int jpegQual, int flags) {
        var mh$ = tjCompressFromYUVPlanes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjCompressFromYUVPlanes", handle, srcPlanes, width, strides, height, subsamp, jpegBuf, jpegSize, jpegQual, flags);
            }
            return (int)mh$.invokeExact(handle, srcPlanes, width, strides, height, subsamp, jpegBuf, jpegSize, jpegQual, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjDecodeYUV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjDecodeYUV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjDecodeYUV(tjhandle handle, const unsigned char *srcBuf, int align, int subsamp, unsigned char *dstBuf, int width, int pitch, int height, int pixelFormat, int flags)
     * }
     */
    public static FunctionDescriptor tjDecodeYUV$descriptor() {
        return tjDecodeYUV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjDecodeYUV(tjhandle handle, const unsigned char *srcBuf, int align, int subsamp, unsigned char *dstBuf, int width, int pitch, int height, int pixelFormat, int flags)
     * }
     */
    public static MethodHandle tjDecodeYUV$handle() {
        return tjDecodeYUV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjDecodeYUV(tjhandle handle, const unsigned char *srcBuf, int align, int subsamp, unsigned char *dstBuf, int width, int pitch, int height, int pixelFormat, int flags)
     * }
     */
    public static int tjDecodeYUV(MemorySegment handle, MemorySegment srcBuf, int align, int subsamp, MemorySegment dstBuf, int width, int pitch, int height, int pixelFormat, int flags) {
        var mh$ = tjDecodeYUV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjDecodeYUV", handle, srcBuf, align, subsamp, dstBuf, width, pitch, height, pixelFormat, flags);
            }
            return (int)mh$.invokeExact(handle, srcBuf, align, subsamp, dstBuf, width, pitch, height, pixelFormat, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjDecodeYUVPlanes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjDecodeYUVPlanes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjDecodeYUVPlanes(tjhandle handle, const unsigned char **srcPlanes, const int *strides, int subsamp, unsigned char *dstBuf, int width, int pitch, int height, int pixelFormat, int flags)
     * }
     */
    public static FunctionDescriptor tjDecodeYUVPlanes$descriptor() {
        return tjDecodeYUVPlanes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjDecodeYUVPlanes(tjhandle handle, const unsigned char **srcPlanes, const int *strides, int subsamp, unsigned char *dstBuf, int width, int pitch, int height, int pixelFormat, int flags)
     * }
     */
    public static MethodHandle tjDecodeYUVPlanes$handle() {
        return tjDecodeYUVPlanes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjDecodeYUVPlanes(tjhandle handle, const unsigned char **srcPlanes, const int *strides, int subsamp, unsigned char *dstBuf, int width, int pitch, int height, int pixelFormat, int flags)
     * }
     */
    public static int tjDecodeYUVPlanes(MemorySegment handle, MemorySegment srcPlanes, MemorySegment strides, int subsamp, MemorySegment dstBuf, int width, int pitch, int height, int pixelFormat, int flags) {
        var mh$ = tjDecodeYUVPlanes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjDecodeYUVPlanes", handle, srcPlanes, strides, subsamp, dstBuf, width, pitch, height, pixelFormat, flags);
            }
            return (int)mh$.invokeExact(handle, srcPlanes, strides, subsamp, dstBuf, width, pitch, height, pixelFormat, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjDecompressHeader3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjDecompressHeader3"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjDecompressHeader3(tjhandle handle, const unsigned char *jpegBuf, unsigned long jpegSize, int *width, int *height, int *jpegSubsamp, int *jpegColorspace)
     * }
     */
    public static FunctionDescriptor tjDecompressHeader3$descriptor() {
        return tjDecompressHeader3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjDecompressHeader3(tjhandle handle, const unsigned char *jpegBuf, unsigned long jpegSize, int *width, int *height, int *jpegSubsamp, int *jpegColorspace)
     * }
     */
    public static MethodHandle tjDecompressHeader3$handle() {
        return tjDecompressHeader3.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjDecompressHeader3(tjhandle handle, const unsigned char *jpegBuf, unsigned long jpegSize, int *width, int *height, int *jpegSubsamp, int *jpegColorspace)
     * }
     */
    public static int tjDecompressHeader3(MemorySegment handle, MemorySegment jpegBuf, long jpegSize, MemorySegment width, MemorySegment height, MemorySegment jpegSubsamp, MemorySegment jpegColorspace) {
        var mh$ = tjDecompressHeader3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjDecompressHeader3", handle, jpegBuf, jpegSize, width, height, jpegSubsamp, jpegColorspace);
            }
            return (int)mh$.invokeExact(handle, jpegBuf, jpegSize, width, height, jpegSubsamp, jpegColorspace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjDecompressToYUV2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjDecompressToYUV2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjDecompressToYUV2(tjhandle handle, const unsigned char *jpegBuf, unsigned long jpegSize, unsigned char *dstBuf, int width, int align, int height, int flags)
     * }
     */
    public static FunctionDescriptor tjDecompressToYUV2$descriptor() {
        return tjDecompressToYUV2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjDecompressToYUV2(tjhandle handle, const unsigned char *jpegBuf, unsigned long jpegSize, unsigned char *dstBuf, int width, int align, int height, int flags)
     * }
     */
    public static MethodHandle tjDecompressToYUV2$handle() {
        return tjDecompressToYUV2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjDecompressToYUV2(tjhandle handle, const unsigned char *jpegBuf, unsigned long jpegSize, unsigned char *dstBuf, int width, int align, int height, int flags)
     * }
     */
    public static int tjDecompressToYUV2(MemorySegment handle, MemorySegment jpegBuf, long jpegSize, MemorySegment dstBuf, int width, int align, int height, int flags) {
        var mh$ = tjDecompressToYUV2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjDecompressToYUV2", handle, jpegBuf, jpegSize, dstBuf, width, align, height, flags);
            }
            return (int)mh$.invokeExact(handle, jpegBuf, jpegSize, dstBuf, width, align, height, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjDecompressToYUVPlanes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjDecompressToYUVPlanes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjDecompressToYUVPlanes(tjhandle handle, const unsigned char *jpegBuf, unsigned long jpegSize, unsigned char **dstPlanes, int width, int *strides, int height, int flags)
     * }
     */
    public static FunctionDescriptor tjDecompressToYUVPlanes$descriptor() {
        return tjDecompressToYUVPlanes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjDecompressToYUVPlanes(tjhandle handle, const unsigned char *jpegBuf, unsigned long jpegSize, unsigned char **dstPlanes, int width, int *strides, int height, int flags)
     * }
     */
    public static MethodHandle tjDecompressToYUVPlanes$handle() {
        return tjDecompressToYUVPlanes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjDecompressToYUVPlanes(tjhandle handle, const unsigned char *jpegBuf, unsigned long jpegSize, unsigned char **dstPlanes, int width, int *strides, int height, int flags)
     * }
     */
    public static int tjDecompressToYUVPlanes(MemorySegment handle, MemorySegment jpegBuf, long jpegSize, MemorySegment dstPlanes, int width, MemorySegment strides, int height, int flags) {
        var mh$ = tjDecompressToYUVPlanes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjDecompressToYUVPlanes", handle, jpegBuf, jpegSize, dstPlanes, width, strides, height, flags);
            }
            return (int)mh$.invokeExact(handle, jpegBuf, jpegSize, dstPlanes, width, strides, height, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjEncodeYUV3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjEncodeYUV3"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjEncodeYUV3(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char *dstBuf, int align, int subsamp, int flags)
     * }
     */
    public static FunctionDescriptor tjEncodeYUV3$descriptor() {
        return tjEncodeYUV3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjEncodeYUV3(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char *dstBuf, int align, int subsamp, int flags)
     * }
     */
    public static MethodHandle tjEncodeYUV3$handle() {
        return tjEncodeYUV3.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjEncodeYUV3(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char *dstBuf, int align, int subsamp, int flags)
     * }
     */
    public static int tjEncodeYUV3(MemorySegment handle, MemorySegment srcBuf, int width, int pitch, int height, int pixelFormat, MemorySegment dstBuf, int align, int subsamp, int flags) {
        var mh$ = tjEncodeYUV3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjEncodeYUV3", handle, srcBuf, width, pitch, height, pixelFormat, dstBuf, align, subsamp, flags);
            }
            return (int)mh$.invokeExact(handle, srcBuf, width, pitch, height, pixelFormat, dstBuf, align, subsamp, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjEncodeYUVPlanes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjEncodeYUVPlanes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjEncodeYUVPlanes(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char **dstPlanes, int *strides, int subsamp, int flags)
     * }
     */
    public static FunctionDescriptor tjEncodeYUVPlanes$descriptor() {
        return tjEncodeYUVPlanes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjEncodeYUVPlanes(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char **dstPlanes, int *strides, int subsamp, int flags)
     * }
     */
    public static MethodHandle tjEncodeYUVPlanes$handle() {
        return tjEncodeYUVPlanes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjEncodeYUVPlanes(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char **dstPlanes, int *strides, int subsamp, int flags)
     * }
     */
    public static int tjEncodeYUVPlanes(MemorySegment handle, MemorySegment srcBuf, int width, int pitch, int height, int pixelFormat, MemorySegment dstPlanes, MemorySegment strides, int subsamp, int flags) {
        var mh$ = tjEncodeYUVPlanes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjEncodeYUVPlanes", handle, srcBuf, width, pitch, height, pixelFormat, dstPlanes, strides, subsamp, flags);
            }
            return (int)mh$.invokeExact(handle, srcBuf, width, pitch, height, pixelFormat, dstPlanes, strides, subsamp, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjPlaneHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjPlaneHeight"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjPlaneHeight(int componentID, int height, int subsamp)
     * }
     */
    public static FunctionDescriptor tjPlaneHeight$descriptor() {
        return tjPlaneHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjPlaneHeight(int componentID, int height, int subsamp)
     * }
     */
    public static MethodHandle tjPlaneHeight$handle() {
        return tjPlaneHeight.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjPlaneHeight(int componentID, int height, int subsamp)
     * }
     */
    public static int tjPlaneHeight(int componentID, int height, int subsamp) {
        var mh$ = tjPlaneHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjPlaneHeight", componentID, height, subsamp);
            }
            return (int)mh$.invokeExact(componentID, height, subsamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjPlaneSizeYUV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_LONG,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjPlaneSizeYUV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long tjPlaneSizeYUV(int componentID, int width, int stride, int height, int subsamp)
     * }
     */
    public static FunctionDescriptor tjPlaneSizeYUV$descriptor() {
        return tjPlaneSizeYUV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long tjPlaneSizeYUV(int componentID, int width, int stride, int height, int subsamp)
     * }
     */
    public static MethodHandle tjPlaneSizeYUV$handle() {
        return tjPlaneSizeYUV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long tjPlaneSizeYUV(int componentID, int width, int stride, int height, int subsamp)
     * }
     */
    public static long tjPlaneSizeYUV(int componentID, int width, int stride, int height, int subsamp) {
        var mh$ = tjPlaneSizeYUV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjPlaneSizeYUV", componentID, width, stride, height, subsamp);
            }
            return (long)mh$.invokeExact(componentID, width, stride, height, subsamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjPlaneWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjPlaneWidth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjPlaneWidth(int componentID, int width, int subsamp)
     * }
     */
    public static FunctionDescriptor tjPlaneWidth$descriptor() {
        return tjPlaneWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjPlaneWidth(int componentID, int width, int subsamp)
     * }
     */
    public static MethodHandle tjPlaneWidth$handle() {
        return tjPlaneWidth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjPlaneWidth(int componentID, int width, int subsamp)
     * }
     */
    public static int tjPlaneWidth(int componentID, int width, int subsamp) {
        var mh$ = tjPlaneWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjPlaneWidth", componentID, width, subsamp);
            }
            return (int)mh$.invokeExact(componentID, width, subsamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjGetErrorCode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjGetErrorCode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjGetErrorCode(tjhandle handle)
     * }
     */
    public static FunctionDescriptor tjGetErrorCode$descriptor() {
        return tjGetErrorCode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjGetErrorCode(tjhandle handle)
     * }
     */
    public static MethodHandle tjGetErrorCode$handle() {
        return tjGetErrorCode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjGetErrorCode(tjhandle handle)
     * }
     */
    public static int tjGetErrorCode(MemorySegment handle) {
        var mh$ = tjGetErrorCode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjGetErrorCode", handle);
            }
            return (int)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjGetErrorStr2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjGetErrorStr2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *tjGetErrorStr2(tjhandle handle)
     * }
     */
    public static FunctionDescriptor tjGetErrorStr2$descriptor() {
        return tjGetErrorStr2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *tjGetErrorStr2(tjhandle handle)
     * }
     */
    public static MethodHandle tjGetErrorStr2$handle() {
        return tjGetErrorStr2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * char *tjGetErrorStr2(tjhandle handle)
     * }
     */
    public static MemorySegment tjGetErrorStr2(MemorySegment handle) {
        var mh$ = tjGetErrorStr2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjGetErrorStr2", handle);
            }
            return (MemorySegment)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjLoadImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjLoadImage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *tjLoadImage(const char *filename, int *width, int align, int *height, int *pixelFormat, int flags)
     * }
     */
    public static FunctionDescriptor tjLoadImage$descriptor() {
        return tjLoadImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *tjLoadImage(const char *filename, int *width, int align, int *height, int *pixelFormat, int flags)
     * }
     */
    public static MethodHandle tjLoadImage$handle() {
        return tjLoadImage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned char *tjLoadImage(const char *filename, int *width, int align, int *height, int *pixelFormat, int flags)
     * }
     */
    public static MemorySegment tjLoadImage(MemorySegment filename, MemorySegment width, int align, MemorySegment height, MemorySegment pixelFormat, int flags) {
        var mh$ = tjLoadImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjLoadImage", filename, width, align, height, pixelFormat, flags);
            }
            return (MemorySegment)mh$.invokeExact(filename, width, align, height, pixelFormat, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tjSaveImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            turbojpeg_h.C_INT,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_POINTER,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT,
            turbojpeg_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    turbojpeg_h.findOrThrow("tjSaveImage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tjSaveImage(const char *filename, unsigned char *buffer, int width, int pitch, int height, int pixelFormat, int flags)
     * }
     */
    public static FunctionDescriptor tjSaveImage$descriptor() {
        return tjSaveImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tjSaveImage(const char *filename, unsigned char *buffer, int width, int pitch, int height, int pixelFormat, int flags)
     * }
     */
    public static MethodHandle tjSaveImage$handle() {
        return tjSaveImage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int tjSaveImage(const char *filename, unsigned char *buffer, int width, int pitch, int height, int pixelFormat, int flags)
     * }
     */
    public static int tjSaveImage(MemorySegment filename, MemorySegment buffer, int width, int pitch, int height, int pixelFormat, int flags) {
        var mh$ = tjSaveImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tjSaveImage", filename, buffer, width, pitch, height, pixelFormat, flags);
            }
            return (int)mh$.invokeExact(filename, buffer, width, pitch, height, pixelFormat, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int TJXOPT_PERFECT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define TJXOPT_PERFECT 1
     * }
     */
    public static int TJXOPT_PERFECT() {
        return TJXOPT_PERFECT;
    }
    private static final int TJXOPT_TRIM = (int)2L;
    /**
     * {@snippet lang=c :
     * #define TJXOPT_TRIM 2
     * }
     */
    public static int TJXOPT_TRIM() {
        return TJXOPT_TRIM;
    }
    private static final int TJXOPT_CROP = (int)4L;
    /**
     * {@snippet lang=c :
     * #define TJXOPT_CROP 4
     * }
     */
    public static int TJXOPT_CROP() {
        return TJXOPT_CROP;
    }
    private static final int TJXOPT_GRAY = (int)8L;
    /**
     * {@snippet lang=c :
     * #define TJXOPT_GRAY 8
     * }
     */
    public static int TJXOPT_GRAY() {
        return TJXOPT_GRAY;
    }
    private static final int TJXOPT_NOOUTPUT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define TJXOPT_NOOUTPUT 16
     * }
     */
    public static int TJXOPT_NOOUTPUT() {
        return TJXOPT_NOOUTPUT;
    }
    private static final int TJXOPT_PROGRESSIVE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define TJXOPT_PROGRESSIVE 32
     * }
     */
    public static int TJXOPT_PROGRESSIVE() {
        return TJXOPT_PROGRESSIVE;
    }
    private static final int TJXOPT_COPYNONE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define TJXOPT_COPYNONE 64
     * }
     */
    public static int TJXOPT_COPYNONE() {
        return TJXOPT_COPYNONE;
    }
    private static final int TJXOPT_ARITHMETIC = (int)128L;
    /**
     * {@snippet lang=c :
     * #define TJXOPT_ARITHMETIC 128
     * }
     */
    public static int TJXOPT_ARITHMETIC() {
        return TJXOPT_ARITHMETIC;
    }
    private static final int TJXOPT_OPTIMIZE = (int)256L;
    /**
     * {@snippet lang=c :
     * #define TJXOPT_OPTIMIZE 256
     * }
     */
    public static int TJXOPT_OPTIMIZE() {
        return TJXOPT_OPTIMIZE;
    }
    private static final int NUMSUBOPT = (int)7L;
    /**
     * {@snippet lang=c :
     * #define NUMSUBOPT 7
     * }
     */
    public static int NUMSUBOPT() {
        return NUMSUBOPT;
    }
    private static final int TJ_444 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define TJ_444 0
     * }
     */
    public static int TJ_444() {
        return TJ_444;
    }
    private static final int TJ_422 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define TJ_422 1
     * }
     */
    public static int TJ_422() {
        return TJ_422;
    }
    private static final int TJ_420 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define TJ_420 2
     * }
     */
    public static int TJ_420() {
        return TJ_420;
    }
    private static final int TJ_411 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define TJ_411 2
     * }
     */
    public static int TJ_411() {
        return TJ_411;
    }
    private static final int TJ_GRAYSCALE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define TJ_GRAYSCALE 3
     * }
     */
    public static int TJ_GRAYSCALE() {
        return TJ_GRAYSCALE;
    }
    private static final int TJ_BOTTOMUP = (int)2L;
    /**
     * {@snippet lang=c :
     * #define TJ_BOTTOMUP 2
     * }
     */
    public static int TJ_BOTTOMUP() {
        return TJ_BOTTOMUP;
    }
    private static final int TJ_FORCEMMX = (int)8L;
    /**
     * {@snippet lang=c :
     * #define TJ_FORCEMMX 8
     * }
     */
    public static int TJ_FORCEMMX() {
        return TJ_FORCEMMX;
    }
    private static final int TJ_FORCESSE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define TJ_FORCESSE 16
     * }
     */
    public static int TJ_FORCESSE() {
        return TJ_FORCESSE;
    }
    private static final int TJ_FORCESSE2 = (int)32L;
    /**
     * {@snippet lang=c :
     * #define TJ_FORCESSE2 32
     * }
     */
    public static int TJ_FORCESSE2() {
        return TJ_FORCESSE2;
    }
    private static final int TJ_FORCESSE3 = (int)128L;
    /**
     * {@snippet lang=c :
     * #define TJ_FORCESSE3 128
     * }
     */
    public static int TJ_FORCESSE3() {
        return TJ_FORCESSE3;
    }
    private static final int TJ_FASTUPSAMPLE = (int)256L;
    /**
     * {@snippet lang=c :
     * #define TJ_FASTUPSAMPLE 256
     * }
     */
    public static int TJ_FASTUPSAMPLE() {
        return TJ_FASTUPSAMPLE;
    }
}

